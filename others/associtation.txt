#has many associaton in which school has many students and students belongs to school

rails g model school name

rails g model student roll:integer school:references
or do like
rails g model student roll:integer school:references

#check into migration you will get
t.references :school, null: false, foreign_key: true
#and in student model 
belongs_to :school

# do following in school model
has_many :students

go to rails console
create school
var = School.first
#now attch multiple students to variable no need to specify student id 
var.students.create(........)
var.students.create(........)
var.students.create(........)

# check all students of var ie School id 1
var.students 


#POLYMORPHIC ASSOCIATION

CONDITION  : three model post , picture and blog has many comments 
            but comment only belongs to either one of the above 

            rails g model post name 
            rails g model picture name
            rails g model blog name

             rails g model comment name 
add following in migration
t.integer :commentable_id , foreign_key: true , polymorphic: true
t.string :commentable_type

i have tested on gpt showing above is incorrect way .. and the correct one is
t.bigint :commentable_id, null: false
t.string :commentable_type, null: false


in models
comments=> belongs_to :commentable , polymorphic: true  
post,picture,blog => has_many :comments , as: :commentable

rails db:migrate
rails c

HAS MANY THROUGH ASSOCIATION

class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

class Appointment < ApplicationRecord
  belongs_to :physician
  belongs_to :patient
end

class Patient < ApplicationRecord
  has_many :appointments
  has_many :physicians, through: :appointments
end

RAILS G MODEL PHYSICIAN NAME
RAILS G MODEL PATIENT NAME
RAILS G MODEL APPOINTSMENT  PHYSICIAN:REFERENCES PATIENT:REFERENCES


$$$$$$$HAS_AND_BELONGS_TO_MANY ASSOCIATION$$$$$$$%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$####


has and has_and_belongs_to_many association forms the many to many relation
between models . but for that we have to create a join table of the relevent model 
with a proper lexical order i.e in a alphabeticle order . 

suppose we have student an dcourse model so student can enroll for multiple
course and a course can have multiple students.

class Student < ApplicationRecord
    has_and_belongs_to_many :courses
end

class Course < ApplicationRecord
    has_and_belongs_to_many :students
end


following is the lexical order to create join table 
rails g migration courses_students_join_table


class CoursesStudentsJoinTable < ActiveRecord::Migration[7.0]
    def change
      create_join_table :courses , :students
    end
  end
   rails db:migrate 
  create dummy data for both the student and courses table 
s1.courses << c1
or s1.courses.create(course_name: "ruby" , fees: 2343 )

similarly for the courses generation 

and if you are not creating the join table in alphabeticla order then you have to mention the 
join table in models such as 

has_and_belongs_to_many :students , join_table: "students_courses" 
has_and_belongs_to_many :courses , join_table: "students_courses" 

Or the simplest way to add the has_and_belongs_to_many association between 2 models is give their model name in command without any value adde like below
rails g migration join_table_cources_students cource student
this above command will directely add below kind of migration migrate it as it
class JoinTableCourcesStudents < ActiveRecord::Migration[7.0]
  def change
    create_join_table :cources, :students do |t|
      # t.index [:cource_id, :student_id]
      # t.index [:student_id, :cource_id]
    end
  end
end


############3 HAS ONE ASSOCIATION $$$$$$$$$$$$$$$$$$$ **************

has one association comes with the belongs_to association . supose every department has one manager
and every manager belongs to one department . it is same as the has many association 
except the tables/models names are in singular format .

rails g model demo name status
rails g model subdemo title demo:references

rails db:migrate


class Demo < ApplicationRecord
    has_one :subdemo
end

class Subdemo < ApplicationRecord
    belongs_to :demo
  end

in rails c
d1=    Demo.create(name: "first" , status: "first")
s1 = Subdemo.create(title: "first" , demo_id: 1)

we can attach only one id 
Accesssssssssssingggggggggggg
d1.subdemo
s1.demo



############ HAS ONE THROUGH association addedd $$$$$$$$$$$$$$$$$$$$$$$
has one through association is also similar to has many through . 
in the below example we have a department having one manager and a manager history through manager

rails g model department name:string
rails g model manage name email contact department:references
rails g model manager_history joining_date experience manager:references

class Department < ApplicationRecord
    has_one :manage
    has_one :manager_history , through: :manage
end

class Manage < ApplicationRecord
    belongs_to :department
    has_one :manager_history
  end

  class ManagerHistory < ApplicationRecord
    belongs_to :manage
  end

in rails c 

    Department.create(name: )
    Manage.create(name: ... , department_id: 1 )
    ManagerHistory.create(nadjajkjik , ........... , manager_id: 1)
@@@@@@@@@#$%%%%%%%%^ Accesssingggggggggggggggggg$%^&*(*&^%$$$$$$$$$$$$$$$)


m = Manager.first
m.department
m.manager_history
  
suppose user and post model is there and doesnt matter if they have any association before or if associations 
of has many na dbelongs_to 

now requirement is that i have to add share_to to post table which has should be many users .

will create new table 
rails g migration create_table_posted_users ==>> u can have any table name migration might look like below 

    create_table :posted_users do |t|
      t.references :article, null: false, foreign_key: true
      t.references :user, null: false, foreign_key: true
      t.timestamps
    end

create a new model posted_user.rb
class PostedUser < ApplicationRecord
belongs_to :post
belongs_to :user
end

now in post model 
has_many :posted_users
has_many :posted_to , throught: :posted_users, class_name: "User" ==>> has_many can be anything as per requirement

now in console be like 
p = Post.last
p.posted_to << [u1, u2]
or p.posted_to_ids = [1, 2]


